@mixin media-breakpoint($breakpoint, $direction: 'min') {
   $breakpoint-value: $breakpoint;

   @if type-of($breakpoint) == string {
      $breakpoint-map: (
         sm: $breakpoint-sm,
         md: $breakpoint-md,
         lg: $breakpoint-lg,
         xl: $breakpoint-xl,
         2xl: $breakpoint-2xl,
         3xl: $breakpoint-3xl,
         4xl: $breakpoint-4xl,
      );
      $breakpoint-value: map-get($breakpoint-map, $breakpoint);
   } @else if type-of($breakpoint) == number {
      $breakpoint-value: if(unitless($breakpoint), $breakpoint * 1px, $breakpoint);
   }

   @if $breakpoint-value {
      @if $direction == 'min' {
         @media (min-width: $breakpoint-value) {
            @content;
         }
      } @else if $direction == 'max' {
         @media (max-width: $breakpoint-value - 1px) {
            @content;
         }
      }
   } @else {
      @error "Invalid breakpoint: #{$breakpoint}";
   }
}

// Cuts off overflowing text with an ellipsis
@mixin text-truncate {
   overflow: hidden;
   text-overflow: ellipsis;
   white-space: nowrap;
}

// Limits text to a specific number of lines
@mixin line-clamp($lines: 1) {
   overflow: hidden;
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: $lines;

   @supports not (-webkit-line-clamp: $lines) {
      display: block;
      position: relative;
      max-height: calc(1.2em * #{$lines});
      padding-right: 1rem;
      &::before {
         content: '...';
         position: absolute;
         right: 0;
         bottom: 0;
      }
      &::after {
         content: '';
         position: absolute;
         right: 0;
         width: 1rem;
         height: 1rem;
         background: white;
      }
   }
}

// Aligns numbers by setting them to equal widths
@mixin tabular-nums {
   font-variant-numeric: tabular-nums;
   font-feature-settings: "tnum";
}

@mixin transition($property, $easing: $ease-in-out, $duration: 0.25s) {
   transition: $property $duration $easing;
}

// Cmd + B


// Адаптивное свойство (clamp)
//@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
//   @if ($startSize==0) {
//      $startSize: 0.000001;
//   }
//   @if ($minSize==0) {
//      $minSize: 0.000001;
//   }
//
//   // Для calc();
//   $addSize: math.div($startSize - $minSize, 16);
//
//   @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
//      $widthFrom: $maxWidth;
//   }
//
//   // Брейк-поинты в EM
//   $widthFromMedia: em($widthFrom);
//   $widthToMedia: em($widthTo);
//
//   // Формула плавающего значения
//   // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
//   $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
//   $yIntersection: -$widthTo * $slope + $minSize;
//   @if ($yIntersection==0) {
//      $yIntersection: 0.000001;
//   }
//   $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;
//
//   // Получение значения свойства
//   $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
//   // Если отрицательные значения
//   @if ($minSize > $startSize) {
//      $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
//   }
//
//   // Если поддерживается clamp();
//   @supports (#{$property}: $propertyValue) {
//      #{$property}: $propertyValue;
//   }
//   // Если не поддерживается clamp();
//   @supports not (#{$property}: $propertyValue) {
//      #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
//   }
//
//   // Устанавливаем значения по умолчанию
//   @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
//      @media (min-width: $widthFromMedia) {
//         #{$property}: inherit;
//      }
//   }
//   @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
//      @media (max-width: $widthToMedia) {
//         #{$property}: inherit;
//      }
//   }
//}