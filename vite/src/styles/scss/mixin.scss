@mixin wordSize($size, $height, $weight:400) {
   font-size: $size + rem;
   font-weight: $weight;
   line-height: $height + rem;
}

// Cmd + B
//@include wordSize(12, 1.5, 700)

@mixin media-breakpoint($breakpoint, $direction: 'min') {
   $breakpoint-value: $breakpoint;

   @if type-of($breakpoint) == string {
      $breakpoint-map: (
         sm: $breakpoint-sm,
         md: $breakpoint-md,
         lg: $breakpoint-lg,
         xl: $breakpoint-xl,
         2xl: $breakpoint-2xl,
         3xl: $breakpoint-3xl,
         4xl: $breakpoint-4xl,
      );
      $breakpoint-value: map-get($breakpoint-map, $breakpoint);
   } @else if type-of($breakpoint) == number {
      $breakpoint-value: if(unitless($breakpoint), $breakpoint * 1px, $breakpoint);
   }

   @if $breakpoint-value {
      @if $direction == 'min' {
         @media (min-width: $breakpoint-value) {
            @content;
         }
      } @else if $direction == 'max' {
         @media (max-width: $breakpoint-value - 1px) {
            @content;
         }
      }
   } @else {
      @error "Invalid breakpoint: #{$breakpoint}";
   }
}

// Cuts off overflowing text with an ellipsis
@mixin text-truncate {
   overflow: hidden;
   text-overflow: ellipsis;
   white-space: nowrap;
}

// Limits text to a specific number of lines
@mixin line-clamp($lines: 1) {
   overflow: hidden;
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: $lines;
   @supports not (-webkit-line-clamp: $lines) {
      display: block;
      position: relative;
      max-height: calc(1.2em * #{$lines});
      padding-right: 1rem;
      &::before {
         content: '...';
         position: absolute;
         right: 0;
         bottom: 0;
      }
      &::after {
         content: '';
         position: absolute;
         right: 0;
         width: 1rem;
         height: 1rem;
         background: white;
      }
   }
}

// Aligns numbers by setting them to equal widths
@mixin tabular-nums {
   font-variant-numeric: tabular-nums;
   font-feature-settings: "tnum";
}
